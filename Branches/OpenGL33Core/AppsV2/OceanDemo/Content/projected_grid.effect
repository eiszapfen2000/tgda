effect "Projected Grid":

technique "whitecaps_precompute"
{
	define BRAK 1
    # effect variables
    uniform float displacementScale;
    uniform sampler2DArray displacementDerivatives
    {
        WrapS = Repeat;
        WrapT = Repeat;
        MinFilter = Linear;
        MagFilter = Linear;
    };

    # vertex streams
    in vec2 in_position : 0;
    in vec2 in_texcoord : 3;
    # fragment streams
    out vec4 ki_lod_0_1 : 0;
    out vec4 ki_lod_2_3 : 1;
    # shaders
    set vertex   shader "whitecaps_precompute.vertex"
    set fragment shader "whitecaps_precompute.fragment"
}

technique "proj_grid_tf_transform"
{
    # effect variables
    uniform mat4 np_modelviewprojectionmatrix;
    uniform mat4 invMVP;
    uniform float areaScale;
    uniform float displacementScale;
    uniform float heightScale;
    uniform vec2     vertexStep;
    uniform samplerBuffer sizes : 0
    uniform sampler2DArray heightmap : 1
    {
        WrapS = Repeat;
        WrapT = Repeat;
        MinFilter = TriLinear;
        MagFilter = Linear;
        Anisotropy = 4;
    };
    uniform sampler2DArray displacement : 2
    {
        WrapS = Repeat;
        WrapT = Repeat;
        MinFilter = TriLinear;
        MagFilter = Linear;
        Anisotropy = 4;
    };

    # vertex streams
    in vec2 in_position : 0;
    # shaders
    set vertex shader "proj_grid_tf_transform.vertex"
}

technique "proj_grid_tf_feedback"
{
    define ROSS
    define SEA
    define SKY
    define WHITECAPS
    # effect variables
    uniform mat4 np_viewprojectionmatrix;
    uniform float areaScale;
    uniform float heightScale;
    uniform float jacobianEpsilon;
    uniform vec3 cameraPosition;
    uniform vec3 directionToSun;
    uniform vec3 sunColor;
    uniform vec3 skyIrradiance;
    uniform vec2 waterColorCoordinate;
    uniform vec2 waterColorIntensityCoordinate;
    uniform samplerBuffer sizes : 0
    uniform sampler2DArray heightmap : 1
    {
        WrapS = Repeat;
        WrapT = Repeat;
        MinFilter = TriLinear;
        MagFilter = Linear;
        Anisotropy = 4;
    };
    uniform sampler2DArray displacement : 2
    {
        WrapS = Repeat;
        WrapT = Repeat;
        MinFilter = TriLinear;
        MagFilter = Linear;
        Anisotropy = 4;
    };
    uniform sampler2DArray gradient : 3
    {
        WrapS = Repeat;
        WrapT = Repeat;
        MinFilter = TriLinear;
        MagFilter = Linear;
        Anisotropy = 16;
    };
    uniform sampler2D watercolor : 4
    {
        WrapS = ClampToEdge;
        WrapT = ClampToEdge;
        MinFilter = Nearest;
        MagFilter = Nearest;
    };
    uniform sampler2D watercolorIntensity : 5
    {
        WrapS = ClampToEdge;
        WrapT = ClampToEdge;
        MinFilter = Nearest;
        MagFilter = Nearest;
    };
    uniform sampler3D variance : 6
    {
        WrapS = ClampToEdge;
        WrapT = ClampToEdge;
        MinFilter = Linear;
        MagFilter = Linear;
    };
    uniform sampler2D skylight : 7
    {
        WrapS = ClampToBorder;
        WrapT = ClampToBorder;
        MinFilter = Trilinear;
        MagFilter = Linear;
        Anisotropy = 16;
    };
    uniform sampler2DArray whitecaps : 8
    {
        WrapS = Repeat;
        WrapT = Repeat;
        MinFilter = Trilinear;
        MagFilter = Linear;
        Anisotropy = 16;
    };

    # vertex streams
    in vec3 in_position : 0;
    in vec2 in_non_disp_position : 1;
    # fragment streams
    out vec4 target : 0;
    # shaders
    set vertex shader "proj_grid_tf_feedback.vertex"
    set fragment shader "proj_grid_tf_feedback.fragment"
}

technique "ross"
{
    define ROSS
    # effect variables
    uniform mat4 np_viewprojectionmatrix;
    uniform float areaScale;
    uniform float heightScale;
    uniform vec3 cameraPosition;
    uniform vec3 directionToSun;
    uniform vec3 sunColor;

    uniform samplerBuffer sizes : 0
    uniform sampler2DArray gradient : 3
    {
        WrapS = Repeat;
        WrapT = Repeat;
        MinFilter = TriLinear;
        MagFilter = Linear;
        Anisotropy = 16;
    };
    uniform sampler3D variance : 6
    {
        WrapS = ClampToEdge;
        WrapT = ClampToEdge;
        MinFilter = Linear;
        MagFilter = Linear;
    };

    # vertex streams
    in vec3 in_position : 0;
    in vec2 in_non_disp_position : 1;
    # fragment streams
    out vec4 target : 0;
    # shaders
    set vertex shader "proj_grid_tf_feedback.vertex"
    set fragment shader "proj_grid_tf_feedback.fragment"
}

technique "sea"
{
    define SEA
    # effect variables
    uniform mat4 np_viewprojectionmatrix;
    uniform float areaScale;
    uniform float heightScale;
    uniform vec3 cameraPosition;
    uniform vec3 directionToSun;
    uniform vec3 sunColor;
    uniform vec3 skyIrradiance;
    uniform vec2 waterColorCoordinate;
    uniform vec2 waterColorIntensityCoordinate;

    uniform samplerBuffer sizes : 0
    uniform sampler2DArray gradient : 3
    {
        WrapS = Repeat;
        WrapT = Repeat;
        MinFilter = TriLinear;
        MagFilter = Linear;
        Anisotropy = 16;
    };
    uniform sampler2D watercolor : 4
    {
        WrapS = ClampToEdge;
        WrapT = ClampToEdge;
        MinFilter = Nearest;
        MagFilter = Nearest;
    };
    uniform sampler2D watercolorIntensity : 5
    {
        WrapS = ClampToEdge;
        WrapT = ClampToEdge;
        MinFilter = Nearest;
        MagFilter = Nearest;
    };
    uniform sampler3D variance : 6
    {
        WrapS = ClampToEdge;
        WrapT = ClampToEdge;
        MinFilter = Linear;
        MagFilter = Linear;
    };

    # vertex streams
    in vec3 in_position : 0;
    in vec2 in_non_disp_position : 1;
    # fragment streams
    out vec4 target : 0;
    # shaders
    set vertex shader "proj_grid_tf_feedback.vertex"
    set fragment shader "proj_grid_tf_feedback.fragment"
}

technique "sky"
{
    define SKY
    # effect variables
    uniform mat4 np_viewprojectionmatrix;
    uniform float areaScale;
    uniform float heightScale;
    uniform vec3 cameraPosition;
    uniform vec3 directionToSun;
    uniform vec3 sunColor;

    uniform samplerBuffer sizes : 0
    uniform sampler2DArray gradient : 3
    {
        WrapS = Repeat;
        WrapT = Repeat;
        MinFilter = TriLinear;
        MagFilter = Linear;
        Anisotropy = 16;
    };
    uniform sampler3D variance : 6
    {
        WrapS = ClampToEdge;
        WrapT = ClampToEdge;
        MinFilter = Linear;
        MagFilter = Linear;
    };
    uniform sampler2D skylight : 7
    {
        WrapS = ClampToBorder;
        WrapT = ClampToBorder;
        MinFilter = Trilinear;
        MagFilter = Linear;
        Anisotropy = 16;
    };

    # vertex streams
    in vec3 in_position : 0;
    in vec2 in_non_disp_position : 1;
    # fragment streams
    out vec4 target : 0;
    # shaders
    set vertex shader "proj_grid_tf_feedback.vertex"
    set fragment shader "proj_grid_tf_feedback.fragment"
}

technique "whitecaps"
{
    define WHITECAPS
    # effect variables
    uniform mat4 np_viewprojectionmatrix;
    uniform float areaScale;
    uniform float heightScale;
    uniform float jacobianEpsilon;
    uniform vec3 cameraPosition;
    uniform vec3 directionToSun;
    uniform vec3 sunColor;

    uniform samplerBuffer sizes : 0
    uniform sampler2DArray gradient : 3
    {
        WrapS = Repeat;
        WrapT = Repeat;
        MinFilter = TriLinear;
        MagFilter = Linear;
        Anisotropy = 16;
    };
    uniform sampler3D variance : 6
    {
        WrapS = ClampToEdge;
        WrapT = ClampToEdge;
        MinFilter = Linear;
        MagFilter = Linear;
    };
    uniform sampler2D skylight : 7
    {
        WrapS = ClampToBorder;
        WrapT = ClampToBorder;
        MinFilter = Trilinear;
        MagFilter = Linear;
        Anisotropy = 16;
    };
    uniform sampler2DArray whitecaps : 8
    {
        WrapS = Repeat;
        WrapT = Repeat;
        MinFilter = Trilinear;
        MagFilter = Linear;
        Anisotropy = 16;
    };

    # vertex streams
    in vec3 in_position : 0;
    in vec2 in_non_disp_position : 1;
    # fragment streams
    out vec4 target : 0;
    # shaders
    set vertex shader "proj_grid_tf_feedback.vertex"
    set fragment shader "proj_grid_tf_feedback.fragment"
}
