sampler2D pressure  : NPCOLORMAP0;
sampler2D velocity  : NPCOLORMAP1;
float4x4 mvp        : NPMODELVIEWPROJECTION;
float2 rViewport    : NPRVIEWPORTSIZE;

float rHalfDX;

struct VInput
{
	float4 position : POSITION;
};

struct VOutput
{
	float4 position : POSITION;
};

VOutput gradient_subtraction_vertexshader(in VInput input)
{
	VOutput output;

    output.position = mul(mvp, input.position);
	
	return output;
}

struct FOutput
{
    float4 velocity : COLOR0;
};

FOutput gradient_subtraction_fragmentshader(in VOutput input,
                                            in float4 rasterPos : WPOS)
{
	FOutput output;

    float2 texcoord = rasterPos.xy * rViewport;

    float2 pL = tex2D(pressure, texcoord - float2(rViewport.x, 0.0f)).xy;
    float2 pR = tex2D(pressure, texcoord + float2(rViewport.x, 0.0f)).xy;
    float2 pB = tex2D(pressure, texcoord - float2(0.0f, rViewport.y)).xy;
    float2 pT = tex2D(pressure, texcoord + float2(0.0f, rViewport.y)).xy;

    output.velocity = tex2D(velocity, texcoord);

//uNew.xy -= halfrdx * half2(pR - pL, pT - pB);

    output.velocity.xy -= float2(pR.x - pL.x, pT.x - pB.x);

	return output;
}


technique gradient_subtraction
{
	pass
	{
		FragmentProgram = compile fp40 gradient_subtraction_fragmentshader();
		VertexProgram   = compile vp40 gradient_subtraction_vertexshader();
	}
}


