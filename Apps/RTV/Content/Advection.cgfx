sampler2D velocity  : NPCOLORMAP0;
sampler2D quantity  : NPCOLORMAP1;
float2 rViewport    : NPRVIEWPORTSIZE;
float4x4 mvpmatrix  : NPMODELVIEWPROJECTION;

float  timestep;

/*-----------------------------------------------------------------------*/

struct AdvectVInput
{
	float4 position			: POSITION;
};

struct AdvectVOutput
{
	float4 position			: POSITION;
};

AdvectVOutput advection_vertexshader(in AdvectVInput input)
{
	AdvectVOutput output;

	output.position = mul(mvpmatrix, input.position);
	
	return output;
}

/*-----------------------------------------------------------------------*/

struct BorderVInput
{
	float4 position			: POSITION;
    float2 texcoord         : TEXCOORD0;
};

struct BorderVOutput
{
	float4 position			: POSITION;
    float2 texcoord         : TEXCOORD0;
};

BorderVOutput border_vertexshader(in BorderVInput input)
{
	BorderVOutput output;

	output.position = mul(mvpmatrix, input.position);
    output.texcoord = input.texcoord;
	
	return output;
}

/*-----------------------------------------------------------------------*/


struct AdvectFOutput
{
	float4 advected		: COLOR0;
    float4 temp         : COLOR1;
};

AdvectFOutput advection_fragmentshader(in AdvectVOutput input,
                                       in float4 rasterPos : WPOS)
{
	AdvectFOutput output;

    float2 texcoord = rasterPos.xy * rViewport;
    float2 lookup   = texcoord - timestep * tex2D(velocity, texcoord).xy;
    float4 result   = tex2D(quantity, lookup);

    //float4 result = float4(lookup.x, lookup.y, 0.0f, 0.0f);

    output.temp = result;
    output.advected = result;

	return output;
}

/*-----------------------------------------------------------------------*/

struct BorderFOutput
{
	float4 color		: COLOR0;
};

BorderFOutput border_fragmentshader(in BorderVOutput input,
                                    in float4 rasterPos : WPOS)
{
	BorderFOutput output;

    float2 texcoord = rasterPos.xy * rViewport + input.texcoord;

    output.color = -tex2D(velocity, texcoord);

	return output;
}

/*-----------------------------------------------------------------------*/

BorderFOutput arbitraryborders_fragmentshader(in AdvectVOutput input,
                                        in float4 rasterPos : WPOS)
{
	BorderFOutput output;

    float2 texcoord = rasterPos.xy * rViewport;

    float4 scaleoffset = tex2D(quantity, texcoord);
    scaleoffset.yw *= rViewport.xy;

    float4 result = float4(0.0f, 0.0f, 0.0f, 1.0f);
    result.x = scaleoffset.x * tex2D(velocity, texcoord + float2(0.0f, scaleoffset.y)).x;
    result.y = scaleoffset.z * tex2D(velocity, texcoord + float2(scaleoffset.w, 0.0f)).y;

    output.color = result;

	return output;
}

/*-----------------------------------------------------------------------*/

technique advect
{
	pass
	{
		FragmentProgram = compile fp40 advection_fragmentshader();
		VertexProgram   = compile vp40 advection_vertexshader();
	}
}

technique border
{
    pass
    {
		FragmentProgram = compile fp40 border_fragmentshader();
		VertexProgram   = compile vp40 border_vertexshader();
    }
}

technique arbitrary_borders
{
    pass
    {
		FragmentProgram = compile fp40 arbitraryborders_fragmentshader();
		VertexProgram   = compile vp40 advection_vertexshader();
    }
}



