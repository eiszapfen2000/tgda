sampler2D pressure   : NPCOLORMAP0;
sampler2D divergence : NPCOLORMAP1;
float4x4 mvp        : NPMODELVIEWPROJECTION;
float2 rViewport    : NPRVIEWPORTSIZE;

float alpha;
float rBeta;

/*-----------------------------------------------------------------------*/

struct PressureVInput
{
	float4 position : POSITION;
};

struct PressureVOutput
{
	float4 position : POSITION;
};

PressureVOutput pressure_vertexshader(in PressureVInput input)
{
	PressureVOutput output;

    output.position = mul(mvp, input.position);
	
	return output;
}

/*-----------------------------------------------------------------------*/

struct BorderVInput
{
	float4 position			: POSITION;
    float2 texcoord         : TEXCOORD0;
};

struct BorderVOutput
{
	float4 position			: POSITION;
    float2 texcoord         : TEXCOORD0;
};

BorderVOutput border_vertexshader(in BorderVInput input)
{
	BorderVOutput output;

	output.position = mul(mvp, input.position);
    output.texcoord = input.texcoord;
	
	return output;
}

/*-----------------------------------------------------------------------*/

struct PressureFOutput
{
    float4 pressure : COLOR0;
    float4 temp     : COLOR1;
};

PressureFOutput pressure_fragmentshader(in PressureVOutput input,
                                        in float4 rasterPos : WPOS)
{
	PressureFOutput output;

    float2 texcoord = rasterPos.xy * rViewport;

    float4 xL = tex2D(pressure, texcoord - float2(rViewport.x, 0.0f));
    float4 xR = tex2D(pressure, texcoord + float2(rViewport.x, 0.0f));
    float4 xB = tex2D(pressure, texcoord - float2(0.0f, rViewport.y));
    float4 xT = tex2D(pressure, texcoord + float2(0.0f, rViewport.y));

    float4 bC = tex2D(divergence, texcoord);

    float4 result = (xL + xR + xB + xT + alpha * bC) * rBeta;

    output.pressure = result;
    output.temp     = result;

	return output;
}

/*-----------------------------------------------------------------------*/

struct BorderFOutput
{
	float4 color		: COLOR0;
};

BorderFOutput border_fragmentshader(in BorderVOutput input,
                                    in float4 rasterPos : WPOS)
{
	BorderFOutput output;

    float2 texcoord = rasterPos.xy * rViewport + input.texcoord;

    output.color = tex2D(pressure, texcoord);

	return output;
}

/*-----------------------------------------------------------------------*/

BorderFOutput arbitraryborders_fragmentshader(in PressureVOutput input,
                                               in float4 rasterPos : WPOS)
{
	BorderFOutput output;

    float2 texcoord = rasterPos.xy * rViewport;

    float4 scaleoffset = tex2D(divergence, texcoord);

    float4 result = float4(0.0f, 0.0f, 0.0f, 1.0f);
    result.x = 0.5f * ( tex2D(pressure, texcoord + scaleoffset.xy).x + tex2D(pressure, texcoord + scaleoffset.zw).x );

    output.color = result;

	return output;
}

/*-----------------------------------------------------------------------*/

technique compute_pressure
{
	pass
	{
		FragmentProgram = compile fp40 pressure_fragmentshader();
		VertexProgram   = compile vp40 pressure_vertexshader();
	}
}

technique border
{
    pass
    {
		FragmentProgram = compile fp40 border_fragmentshader();
		VertexProgram   = compile vp40 border_vertexshader();
    }
}

technique arbitrary_borders
{
    pass
    {
		FragmentProgram = compile fp40 arbitraryborders_fragmentshader();
		VertexProgram   = compile vp40 pressure_vertexshader();
    }
}


