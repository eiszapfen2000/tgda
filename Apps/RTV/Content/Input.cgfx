float4x4 mvpmatrix : NPMODELVIEWPROJECTION;

float2 clickPosition;
float  radius;
float4 color;

struct INPUTDATA
{
	float4 position			: POSITION;
};

struct VOUTPUTDATA
{
	float4 position			: POSITION;
};

VOUTPUTDATA mvertexshader(in INPUTDATA input)
{
	VOUTPUTDATA output;

	output.position = mul(mvpmatrix, input.position);
	
	return output;
}

struct FOUTPUTDATA
{
	float4 color : COLOR0;
};


// WPOS semantic, origin (0,0) = lower left

FOUTPUTDATA mfragmentshader(in VOUTPUTDATA input,
                            in float4 rasterPos : WPOS)
{
	FOUTPUTDATA output;

    float2 distance = rasterPos.xy - clickPosition.xy;
    float  squareDistance = dot(distance, distance);
    float  exponent = -squareDistance / radius;
    float brak = exp(exponent);

    output.color = float4(brak, brak, 0.0f, 1.0f);

	return output;
}

FOUTPUTDATA ink_mfragmentshader(in VOUTPUTDATA input,
                            in float4 rasterPos : WPOS)
{
	FOUTPUTDATA output;

    float2 distance = rasterPos.xy - clickPosition.xy;
    float  squareDistance = dot(distance, distance);
    float  exponent = -squareDistance / radius;
    float  brak = exp(exponent);

    output.color = color * brak;

	return output;
}

technique input_ink
{
	pass
	{
		FragmentProgram = compile fp40 ink_mfragmentshader();
		VertexProgram   = compile vp40 mvertexshader();
	}
}

technique input_velocity
{
	pass
	{
		FragmentProgram = compile fp40 mfragmentshader();
		VertexProgram   = compile vp40 mvertexshader();
	}
}

