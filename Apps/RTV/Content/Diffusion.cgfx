sampler2D velocity : TEXUNIT0;
float2 rViewport   : NPRVIEWPORTSIZE;

float alpha;
float rBeta;

struct DiffuseVInput
{
	float4 position : POSITION;
};

struct DiffuseVOutput
{
	float4 position : POSITION;
};

DiffuseVOutput diffusion_vertexshader(in DiffuseVInput input)
{
	DiffuseVOutput output;

    output.position = input.position;
	
	return output;
}

struct DiffuseFOutput
{
    float4 diffused : COLOR0;
};

DiffuseFOutput diffusion_fragmentshader(in DiffuseVOutput input,
                                        in float4 rasterPos : WPOS)
{
	DiffuseFOutput output;

    float2 texcoord = rasterPos.xy * rViewport;

    float4 xL = tex2D(velocity, texcoord - float2(rViewport.x, 0.0f));
    float4 xR = tex2D(velocity, texcoord + float2(rViewport.x, 0.0f));
    float4 xB = tex2D(velocity, texcoord - float2(0.0f, rViewport.y));
    float4 xT = tex2D(velocity, texcoord + float2(0.0f, rViewport.y));

    float4 bC = tex2D(velocity, texcoord);

    output.diffused = (xL + xR + xB + xT + alpha * bC) * rBeta;
//  output.diffused = float4(1.0f, 0.0f, 0.0f, 0.0f);

	return output;
}

technique diffuse
{
	pass
	{
		FragmentProgram = compile fp40 diffusion_fragmentshader();
		VertexProgram   = compile vp40 diffusion_vertexshader();
	}
}

