float4x4 mvpmatrix : NPMODELVIEWPROJECTION;
sampler2D colormap   : NPCOLORMAP0;

struct INPUTDATA
{
	float4 position			: POSITION;
    float2 texcoord         : TEXCOORD0;
};

struct VOUTPUTDATA
{
	float4 position			: POSITION;
    float2 texcoord         : TEXCOORD0;
};

VOUTPUTDATA mvertexshader(INPUTDATA input)
{
	VOUTPUTDATA output;

	output.position = mul(mvpmatrix, input.position);
    output.texcoord = input.texcoord;
	
	return output;
}

struct FOUTPUTDATA
{
	float4 color			: COLOR0;
};

FOUTPUTDATA mfragmentshader(VOUTPUTDATA input)
{
	FOUTPUTDATA output;

    //output.color = float4(1.0f, 0.0f, 0.0f, 0.0f);
    output.color = abs(tex2D(colormap, input.texcoord))*2.0f;

	return output;
}

FOUTPUTDATA boundaries_paint_mfragmentshader(VOUTPUTDATA input)
{
	FOUTPUTDATA output;

    //output.color = float4(1.0f, 0.0f, 0.0f, 0.0f);
    float4 color = tex2D(colormap, input.texcoord);

    if ( color.x > 0.0f )
    {
        color.r = color.b = 0.8f;
        color.g = 0.7f;
    }

    output.color = color;
	return output;
}


technique fullscreen
{
	pass
	{
		FragmentProgram = compile fp40 mfragmentshader();
		VertexProgram = compile vp40 mvertexshader();
	}
}

technique boundaries
{
	pass
	{
		FragmentProgram = compile fp40 boundaries_paint_mfragmentshader();
		VertexProgram = compile vp40 mvertexshader();
	}
}

