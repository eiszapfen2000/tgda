sampler2D boundaries  : NPCOLORMAP0;
sampler2D lookupTable : NPCOLORMAP1;
float2 rViewport      : NPRVIEWPORTSIZE;
float4x4 mvpmatrix    : NPMODELVIEWPROJECTION;

/*-----------------------------------------------------------------------*/

struct VInput
{
	float4 position			: POSITION;
};

struct VOutput
{
	float4 position			: POSITION;
};

VOutput updateOffsets_mvertexshader(in VInput input)
{
	VOutput output;

	output.position = mul(mvpmatrix, input.position);
	
	return output;
}

/*-----------------------------------------------------------------------*/

struct FOutput
{
	float4 color : COLOR0;
};

FOutput updateOffsets_mfragmentshader(in VOutput input,
                                      in float4 rasterPos : WPOS)
{
	FOutput output;

    float2 texcoord = rasterPos.xy * rViewport;

    float xW = tex2D(boundaries, texcoord - float2(rViewport.x, 0.0f)).x;
    float xE = tex2D(boundaries, texcoord + float2(rViewport.x, 0.0f)).x;
    float xS = tex2D(boundaries, texcoord - float2(0.0f, rViewport.y)).x;
    float xN = tex2D(boundaries, texcoord + float2(0.0f, rViewport.y)).x;

    float xC = tex2D(boundaries, texcoord).x;

    float index = (3.0f * xN + xE + 5.0f * xS + 7.0f * xW + 17.0f * xC)/34.0f;

    output.color = tex2D(lookupTable, float2(index, 0.5f));

	return output;
}

technique updateOffsets
{
	pass
	{
		FragmentProgram = compile fp40 updateOffsets_mfragmentshader();
		VertexProgram   = compile vp40 updateOffsets_mvertexshader();
	}
}


