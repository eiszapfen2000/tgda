float4x4 mvp : NPMODELVIEWPROJECTION;

float3 LightDirection;
float2 ThetaSun;
float3 ZenithColor;
	
float3 AColor;
float3 BColor;
float3 CColor;
float3 DColor;
float3 EColor;

struct INPUTDATA
{
	float3 position : POSITION;
    float3 normal   : NORMAL;
    float2 texcoord : TEXCOORD0;
};

struct VOUTPUTDATA
{
	float4 position	: POSITION;
    float4 color    : TEXCOORD0;
};

VOUTPUTDATA mvertexshader(INPUTDATA input)
{
	VOUTPUTDATA output;

	output.position = mul(mvp, float4(input.position, 1.0f));

	float theta = dot( float3(0.0f, 1.0f, 0.0f), input.normal);
	float gamma = dot( LightDirection, input.normal );

	float cos2gamma = gamma * gamma;
    gamma = acos( gamma );

    float3 num = (1.0f + AColor * exp( BColor / theta )) * (1.0f + CColor * exp( DColor * gamma ) + EColor * cos2gamma);    
    float3 den = (1.0f + AColor * exp( BColor )) * (1.0f + CColor * exp( DColor * ThetaSun.x ) + EColor * ThetaSun.y);   
    float3 xyY = num / den * ZenithColor;

    float3 XYZ;                                                                                             
                                                                                                            
    XYZ.x = (xyY.x / xyY.y) * xyY.z;                                                                        
    XYZ.y = xyY.z;                                                                                          
    XYZ.z = ((1.0f - xyY.x - xyY.y) / xyY.y) * xyY.z;

    const static  float3x3 conv_Mat =  float3x3( 
	 3.240479f, -1.537150f, -0.498535,
    -0.969256f,  1.875992f,  0.041556,
     0.055648f, -0.204043f,  1.057311 );

    output.color = float4(mul(conv_Mat, XYZ), 1.0f);
    output.color.rgb *= 0.00025f;
	
	return output;
}

struct FOUTPUTDATA
{
	float4 color : COLOR0;
};

FOUTPUTDATA mfragmentshader(VOUTPUTDATA input)
{
	FOUTPUTDATA output;

    output.color = (input.color);

	return output;
}

technique preetham
{
	pass
	{
		FragmentProgram = compile fp40 mfragmentshader();
		VertexProgram = compile vp40 mvertexshader();
	}
}

