#version 150

in vec2 out_texcoords;

void main()
{
    int kernelWidth = 2 * kernelRadius + 1;
    ivec2 sourceSize = textureSize(source, 0);
    vec2 v = vec2(sourceSize);
    vec2 sourceDxy = vec2(1.0 / v.x, 1.0 / v.y);

    /*
    int kstart = -kernelRadius;
    int kend   =  kernelRadius + 1;
    float result = 0.0;

    for (int i = kstart; i < kend; i++)
    {
        for (int j = kstart; j < kend; j++)
        {
            int indexki = i + kernelRadius;
            int indexkj = j + kernelRadius;
            int indexk  = indexki * kernelWidth + indexkj;

            vec2 o = vec2(j, i) * sourceDxy;

            float ks = texelFetch(kernel, indexk).r;
            float h  = textureLod(source, out_texcoords + o, 0).r;
            float dd = textureLod(depthDerivative, out_texcoords + o, 0).r;
            dd = max(-10.0, min(10.0, dd));
            result += (ks * tanh(dd) * h );
            //result += (ks * h );
        }
    }
    */

    
    int kend = kernelRadius + 1;
    int lend = kend;

    float result = textureLod(source, out_texcoords, 0).r;

    for (int k = 1; k < kend; k++)
    {
        for (int l = 1; l < lend; l++)
        {
            int indexk = k + kernelRadius;
            int indexl = l + kernelRadius;
            int indexkernel = indexl * kernelWidth + indexk;

            vec2 o = vec2(k, l) * sourceDxy;
            vec2 opkml = vec2( o.x, -o.y);
            vec2 omkpl = vec2(-o.x,  o.y);

            float ks = texelFetch(kernel, indexkernel).r;

            vec4 h;
            h.x  = textureLod(source, out_texcoords + o, 0).r;
            h.y  = textureLod(source, out_texcoords - o, 0).r;
            h.z  = textureLod(source, out_texcoords + opkml, 0).r;
            h.w  = textureLod(source, out_texcoords + omkpl, 0).r;

            vec4 dd;
            dd.x  = textureLod(depthDerivative, out_texcoords + o, 0).r;
            dd.y  = textureLod(depthDerivative, out_texcoords - o, 0).r;
            dd.z  = textureLod(depthDerivative, out_texcoords + opkml, 0).r;
            dd.w  = textureLod(depthDerivative, out_texcoords + omkpl, 0).r;

            dd = max(min(dd, 10.0), -10.0);
            dd = tanh(dd);

            vec4 f = h * dd;

            result += (ks * (f.x + f.y + f.z + f.w));
        }
    }
    
    for (int l = 1; l < lend; l++)
    {
        int k = 0;
        int indexk = k + kernelRadius;
        int indexl = l + kernelRadius;
        int indexkernel = indexl * kernelWidth + indexk;

        vec2 o = l * sourceDxy;
        vec2 oy = vec2(0.0, o.y);
        vec2 ox = vec2(o.x, 0.0);

        float ks = texelFetch(kernel, indexkernel).r;

        vec4 h;
        h.x = textureLod(source, out_texcoords + oy, 0).r;
        h.y = textureLod(source, out_texcoords - oy, 0).r;
        h.z = textureLod(source, out_texcoords + ox, 0).r;
        h.w = textureLod(source, out_texcoords - ox, 0).r;

        vec4 dd;
        dd.x = textureLod(depthDerivative, out_texcoords + oy, 0).r;
        dd.y = textureLod(depthDerivative, out_texcoords - oy, 0).r;
        dd.z = textureLod(depthDerivative, out_texcoords + ox, 0).r;
        dd.w = textureLod(depthDerivative, out_texcoords - ox, 0).r;

        dd = max(min(dd, 10.0), -10.0);
        dd = tanh(dd);

        vec4 f = h * dd;

        result += (ks * (f.x + f.y + f.z + f.w));
    }
    

    target = vec4(result);
}
