#version 150

in vec2 out_texcoords;

void main()
{
    int kernelWidth = 2 * kernelRadius + 1;
    ivec2 sourceSize = textureSize(source, 0);
    vec2 v = vec2(sourceSize);
    vec2 sourceDxy = vec2(1.0 / v.x, 1.0 / v.y);

    
    int kstart = -kernelRadius;
    int kend   =  kernelRadius + 1;
    float result = 0.0;

    for (int i = kstart; i < kend; i++)
    {
        for (int j = kstart; j < kend; j++)
        {
            int indexki = i + kernelRadius;
            int indexkj = j + kernelRadius;
            int indexk  = indexki * kernelWidth + indexkj;
            float fi = i;
            float fj = j;

            vec2 sourceCoords = out_texcoords + vec2(fj * sourceDxy.x, fi * sourceDxy.y);

            float ks = texelFetch(kernel, indexk).r;
            float h  = textureLod(source, sourceCoords, 0).r;
            float dd = textureLod(depthDerivative, sourceCoords, 0).r;
            dd = max(-10.0, min(10.0, dd));

            result += (ks * tanh(dd) * h );
        }
    }
    

    /*
    const vec4 mask = vec4(1.0, 1.0, 1.0, -1.0);
    int kend = kernelRadius + 1;
    int lend = kend;

    float result = textureLod(source, out_texcoords, 0).r;

    for (int k = 1; k < kend; k++)
    {
        for (int l = 1; l < lend; l++)
        {
            int indexk = k + kernelRadius;
            int indexl = l + kernelRadius;
            int indexkernel = indexl * kernelWidth + indexk;

            vec2 o = vec2(k, l) * sourceDxy;

            float ks = texelFetch(kernel, indexkernel).r;

            float hpkpl  = textureLod(source, out_texcoords + o * mask.xy, 0).r;
            float hmkml  = textureLod(source, out_texcoords - o * mask.xy, 0).r;
            float hpkml  = textureLod(source, out_texcoords + o * mask.zw, 0).r;
            float hmkpl  = textureLod(source, out_texcoords - o * mask.zw, 0).r;

            result += (ks * (hpkpl + hmkml + hpkml + hmkpl));
        }
    }
    

    
    for (int l = 1; l < lend; l++)
    {
        int k = 0;
        int indexk = k + kernelRadius;
        int indexl = l + kernelRadius;
        int indexkernel = indexl * kernelWidth + indexk;

        vec2 o = vec2(k, l) * sourceDxy;

        float ks = texelFetch(kernel, indexkernel).r;

        float hpkpl  = textureLod(source, out_texcoords + o, 0).r;
        float hmkml  = textureLod(source, out_texcoords - o, 0).r;
        float hpkml  = textureLod(source, out_texcoords + o.yx, 0).r;
        float hmkpl  = textureLod(source, out_texcoords - o.yx, 0).r;

        result += (ks * (hpkpl + hmkml + hpkml + hmkpl));
    }
    */

    target = vec4(result);
}
