effect "Deferred Effect":

technique "base_xz"
{
    # effect variables
    uniform mat4 np_modelviewprojectionmatrix;
    uniform vec2 scale;
    # vertex streams
    in vec2 in_position : 0;
    in float in_height : 1;
    in vec4 in_supplemental : 2;
    # fragment streams
    out vec4 target : 0;
    # shaders
    set vertex shader "base_xz.vertex"
    set fragment shader "base_xz.fragment"
}

technique "proj_grid_corners"
{
    # effect variables
    uniform mat4 np_modelviewprojectionmatrix;
    # vertex streams
    in vec3 in_position : 0;
    # fragment streams
    out vec4 target : 0;
    # shaders
    set vertex shader "proj_grid_corners.vertex"
    set fragment shader "proj_grid_corners.fragment"
}

technique "geometry"
{
    # effect variables
    uniform mat4 np_modelviewprojectionmatrix;
    uniform mat4 np_modelviewmatrix;
    uniform mat4 np_modelmatrix;
    # vertex streams
    in vec3 in_position : 0;
    in vec3 in_normal : 1;
    # fragment streams
    out vec4 positions_target : 0;
    out vec4 normals_target : 1;
    # shaders
    set vertex shader "deferred_geometry.vertex"
    set fragment shader "deferred_geometry.fragment"
}

technique "texture"
{
    # effect variables
    uniform sampler2D colormap;
    # vertex streams
    in vec2 in_position : 0;
    in vec2 in_texcoords : 3;
    # fragment streams
    out vec4 target : 0;
    # shaders
    set vertex shader "fullscreen_quad.vertex"
    set fragment shader "fullscreen_quad.fragment"
}

technique "directional_light"
{
    # effect variables
    uniform vec3 lightDirection;
    uniform sampler2D positions;
    uniform sampler2D normals;
    # vertex streams
    in vec2 in_position : 0;
    in vec2 in_texcoords : 3;
    # fragment streams
    out vec4 target : 0;
    # shaders
    set vertex shader "deferred_directional_light.vertex"
    set fragment shader "deferred_directional_light.fragment"
}

technique "water_surface"
{
    # effect variables
    uniform vec3 cameraPosition;
    uniform vec2 heightfieldMinMax;
    uniform sampler2D positions;
    uniform sampler2D normals;
    uniform sampler2D heightfield
    {
        WrapS = Repeat;
        WrapT = Repeat;
        MinFilter = Linear;
        MagFilter = Linear;
    };
    uniform sampler2D gradientX
    {
        WrapS = Repeat;
        WrapT = Repeat;
        MinFilter = Linear;
        MagFilter = Linear;
    };
    uniform sampler2D gradientZ
    {
        WrapS = Repeat;
        WrapT = Repeat;
        MinFilter = Linear;
        MagFilter = Linear;
    };
    # vertex streams
    in vec2 in_position : 0;
    in vec2 in_texcoords : 3;
    # fragment streams
    out vec4 target : 0;
    # shaders
    set vertex shader "deferred_water_surface.vertex"
    set fragment shader "deferred_water_surface.fragment"
}

