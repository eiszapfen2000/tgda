#version 150

in vec3 out_ws_position;
in vec2 out_ws_non_disp_position;

#define MATH_PI 3.14159

float blinn_phong_distribution(vec3 n, vec3 h, float alpha_p)
{
    float specular_normalization = (alpha_p + 2.0) / (2.0 * MATH_PI);
    float n_dot_h = clamp(dot(n, h), 0.0, 1.0);
    float power = pow(n_dot_h, alpha_p);

    return specular_normalization * power;
}

float beckmann_distribution(vec3 n, vec3 h, float m)
{
    float n_dot_h = clamp(dot(n, h), 0.001, 1.0);
    float n_dot_h_square = n_dot_h * n_dot_h;

    float exponent = (n_dot_h_square - 1.0) / (m * m * n_dot_h_square);
    float power = exp(exponent);

    return power / (MATH_PI * m * m * n_dot_h_square * n_dot_h_square);
}

float geometry_implicit(vec3 n, vec3 h, vec3 v, vec3 l)
{
    float n_dot_l = clamp(dot(n, l), 0.0, 1.0);
    float n_dot_v = clamp(dot(n, v), 0.0, 1.0);

    return n_dot_l * n_dot_v;
}

float geometry_cook_torrance(vec3 n, vec3 h, vec3 v, vec3 l)
{
    float n_dot_h = clamp(dot(n, h), 0.001, 1.0);
    float n_dot_v = clamp(dot(n, v), 0.001, 1.0);
    float n_dot_l = clamp(dot(n, l), 0.001, 1.0);
    float v_dot_h = clamp(dot(v, h), 0.001, 1.0);

    float g1 = (2.0 * n_dot_h * n_dot_v) / v_dot_h;
    float g2 = (2.0 * n_dot_h * n_dot_l) / v_dot_h;

    return min(1.0, min(g1, g2));
}

// assumes x > 0
float erfc(float x)
{
    return 2.0 * exp(-x * x) / (2.319 * x + sqrt(4.0 + 1.52 * x * x));
}

float erf(float x)
{
    float a   = 0.140012;
    float x2  = x * x;
    float ax2 = a * x2;
    return sign(x) * sqrt( 1.0 - exp(-x2*(4.0/MATH_PI + ax2)/(1.0 + ax2)) );
}

float Lambda(float cosTheta, float sigmaSq)
{
    float v = cosTheta / sqrt((1.0 - cosTheta * cosTheta) * (2.0 * sigmaSq));

    return max(0.0, (exp(-v * v) - v * sqrt(MATH_PI) * erfc(v)) / (2.0 * v * sqrt(MATH_PI)));
}

// L, V, N, Tx, Ty in world space
float reflectedSunRadiance(vec3 L, vec3 V, vec3 N, vec3 Tx, vec3 Ty, vec2 sigmaSq)
{
    vec3 H = normalize(L + V);
    float zetax = dot(H, Tx) / dot(H, N);
    float zetay = dot(H, Ty) / dot(H, N);

    float zL = dot(L, N); // cos of source zenith angle
    float zV = dot(V, N); // cos of receiver zenith angle
    float zH = dot(H, N); // cos of facet normal zenith angle
    float zH2 = zH * zH;

    float p = exp(-0.5 * (zetax * zetax / sigmaSq.x + zetay * zetay / sigmaSq.y))
                / (2.0 * MATH_PI * sqrt(sigmaSq.x * sigmaSq.y));

    float tanV = atan(dot(V, Ty), dot(V, Tx));
    float cosV2 = 1.0 / (1.0 + tanV * tanV);
    float sigmaV2 = sigmaSq.x * cosV2 + sigmaSq.y * (1.0 - cosV2);

    float tanL = atan(dot(L, Ty), dot(L, Tx));
    float cosL2 = 1.0 / (1.0 + tanL * tanL);
    float sigmaL2 = sigmaSq.x * cosL2 + sigmaSq.y * (1.0 - cosL2);

    float fresnel = 0.02 + 0.98 * pow(1.0 - dot(V, H), 5.0);

    zL = max(zL, 0.01);
    zV = max(zV, 0.01);

    return fresnel * p / ((1.0 + Lambda(zL, sigmaL2) + Lambda(zV, sigmaV2)) * zV * zH2 * zH2 * 4.0);
}

float meanFresnel(float cosThetaV, float sigmaV)
{
    return pow(1.0 - cosThetaV, 5.0 * exp(-2.69 * sigmaV)) / (1.0 + 22.7 * pow(sigmaV, 1.5));
}

// V, N in world space
float meanFresnel(vec3 V, vec3 N, vec2 sigmaSq)
{
    // view direction in wind space
    vec2 v = V.xz;
    // cos^2 and sin^2 of view direction
    vec2 t = v * v / (1.0 - V.y * V.y);
    // slope variance in view direction
    float sigmaV2 = dot(t, sigmaSq);

    return meanFresnel(dot(V, N), sqrt(sigmaV2));
}

void main()
{
    float Jxx = dFdx(out_ws_non_disp_position.x);
    float Jxy = dFdy(out_ws_non_disp_position.x);
    float Jyx = dFdx(out_ws_non_disp_position.y);
    float Jyy = dFdy(out_ws_non_disp_position.y);
    float A = Jxx * Jxx + Jyx * Jyx;
    float B = Jxx * Jxy + Jyx * Jyy;
    float C = Jxy * Jxy + Jyy * Jyy;
    float ua = pow(A, 0.25);
    float ub = 0.5 + 0.5 * B / sqrt(A * C);
    float uc = pow(C, 0.25);

    vec2 sigmaSq = texture(variance, vec3(ua, ub, uc)).xy * 100.0;
    sigmaSq = max(sigmaSq, 2e-5);

    vec2 texcoord = out_ws_non_disp_position;
    texcoord *= (1.0 / area);

    vec2 grad = textureLod(gradient, texcoord, 0.0).xy;
    vec3 normal = vec3(-grad.x, 1.0, grad.y);

    vec3 lightDir = vec3(0.0, 1.0, -1.0);
    vec3 viewDir  = cameraPosition - out_ws_position;
    vec3 l        = normalize(lightDir);
    vec3 v        = normalize(viewDir);
    //vec3 n        = normalize(out_normal);
    vec3 n        = normalize(normal);
    vec3 h        = normalize(v + l);
    vec3 r        = 2.0 * dot(l, n) * n - l;

    vec3 c_light = vec3(1.0, 1.0, 1.0);
    vec3 c_diff  = vec3(0.0, 0.15, 0.25);
    vec3 c_spec  = vec3(0.02);

    float alpha_p = 12.0;
    float m_alpha_p = sqrt(2.0 / (alpha_p + 2.0));
    float specular_normalization = (alpha_p + 2.0) / (2.0 * MATH_PI);
    float brdf_factor = MATH_PI / 4.0;

    float r_dot_l = clamp(dot(r, l), 0.001, 1.0);
    float n_dot_l = clamp(dot(n, l), 0.001, 1.0);
    float n_dot_h = clamp(dot(n, h), 0.001, 1.0);
    float n_dot_v = clamp(dot(n, v), 0.001, 1.0);
    float l_dot_h = clamp(dot(l, h), 0.001, 1.0);

    vec3 f_schlick = vec3(meanFresnel(v, n, sigmaSq));
    //vec3 f_schlick = c_spec + ((vec3(1.0) - c_spec) * pow(1.0 - clamp(dot(l,h), 0.0, 1.0), 5.0));

    vec3 tx = vec3(1.0, grad.x, 0.0);
    vec3 tz = vec3(0.0, -grad.y, 1.0);
    vec3 tn = cross(tz, tx);

    mat3 tnb = mat3(normalize(tx), normalize(tn), normalize(tz));
    mat3 itnb = inverse(tnb);

    vec3 tnbl = normalize(itnb * lightDir);
    vec3 tnbv = normalize(itnb * viewDir);
    vec3 tnbh = normalize(tnbv + tnbl);

    vec3 tnbf_schlick = c_spec + ((vec3(1.0) - c_spec) * pow(1.0 - clamp(dot(tnbl,tnbh), 0.0, 1.0), 5.0));

    vec3 sun = vec3(0.95, 0.95, 0.05) * 25.0;
    float brak = reflectedSunRadiance(l, v, n, normalize(tx), normalize(tz), sigmaSq);

    vec3 sea = vec3(0.05, 0.25, 0.5);
    vec3 sky = vec3(4.0, 2.0, 2.0);
    vec3 lsea = sea * sky / MATH_PI;
    vec3 lala = (vec3(1.0) - f_schlick) * lsea;

    /*
    float foreshortening = n_dot_l * n_dot_v;

    //vec3 f_schlick = c_spec + ((vec3(1.0) - c_spec) * pow(1.0 - dot(l,h), 5.0));

    float D_bp = blinn_phong_distribution(n, h, alpha_p);
    float D_bm = beckmann_distribution(n, h, m_alpha_p);

    float G_i  = geometry_implicit(n, h, v, l);
    float G_ct = geometry_cook_torrance(n, h, v, l);

    vec3 diffuse_term = c_diff;
    //vec3 specular_term = f_schlick * D_bp * (G_i / foreshortening) * brdf_factor;
    //vec3 specular_term = f_schlick * D_bp * brdf_factor;
    vec3 specular_term = f_schlick * D_bm * (max(0.001, G_ct) / max(0.001, foreshortening)) * brdf_factor;

    diffuse_term = vec3(0.0);
    //specular_term = vec3(0.0);
    //diffuse_term *= 0.7;
    //specular_term = max(specular_term * 0.3, 0.0);
    vec3 L_zero = (diffuse_term + specular_term) * (c_light * n_dot_l);

    vec2 cell = mod(abs(out_ws_position.xz), area);

    if ( cell.x < 5.0 || cell.y < 5.0 )
    {
        L_zero = vec3(0.0, 1.0, 0.0);
    }

    //L_zero = f_schlick * D_bp * brdf_factor;
    vec3 result = pow(L_zero, vec3(1.0 / 2.2));
    target = vec4(L_zero, 1.0);
    */

    target = vec4(max(sun * brak, 0.0), 1.0);
}

